#Zad 1
import time
tablica = []
st=time.time()
tablica.append(1)
et=time.time()

print ("tyle minelo przy zwyklym dodawaniu",(et-st)*1000)
for i in range(10):
    st=time.time()
    tablica.append(i)
    et=time.time()
    print ("a tyle w petli",(et-st)*1000)
#w petli z jakiegos powodu jest szybciej
##############################################################
#Zad 2
#Stwórz kalkulator do obliczenia aktualnej godziny w konkretnej strefie czasowej. 
#Do zadania wystarczy utworzyć słownik z przesunięciami czasowymi z i od UTC.
from datetime import datetime
czas = {
    "Wyspy Howland" : -12,
    "Wyspy Jarvis" : -11,
    "Hawaje" : -10,
    "Anchorage" : -9,
    "Los Angeles" : -8,
    "Denver" : -7,
    "Chicago" : -6,
    "Nowy Jork" : -5,
    "Puerto Rico" : -4,
    "Rio de Janeiro" : -3,
    "Trinidade" : -2,
    "Ittoqqortoormiit" : -1,
    "UTC" : 0,
    "Warszawa" : 1,
    "Kair" : 2,
    "Moskwa" : 3,
    "Wolgograd" : 4,
    "Jekaterynburg" : 5,
    "Bhutan" : 6,
    "Nowosybirsk" : 7,
    "Taiwan" : 8,
    "Tokyo" : 9,
    "Sydney" : 10,
    "Magadan" : 11,
    "Auckland" : 12    
}

def obliczCzas(strefa):
    if strefa not in czas:
        raise NotImplemented()
    else: 
        utch = datetime.utcnow().hour
        utcmin= datetime.utcnow().minute
        utch += czas[strefa]
        return str(utch)+":"+str(utcmin)

print(obliczCzas("Kair"))
####################################################################################
#Zad3
#Zmodyfikuj kod związany z losowaniem liczb z przedziału od 1 do 10, 
#tak aby obliczał przybliżoną wartość oczekiwaną obliczoną jako średnią (z prób).
#Uśrednienie ma nastąpić 1m razy (milion razy).
from random import Random


rand = Random()
try_count=1
srednia=0
milion=1000000
for i in range(milion):
    while True: 
        if rand.randint(0, 10) >= 10: # random [0,10]
            break
        else:     
            try_count += 1
            continue
    srednia+=try_count
print(srednia/milion)
#chyba nie zrozumialem polecenia :/

####################################################################################

#Zad4
#Napisz algorytm obliczający kolejne liczby pierwsze dla zadanych wartości.
def obliczanieLiczbPierwszych(zadanaWartosc):
    for p in range(zadanaWartosc):
        for i in range(2,p):
            if (p%i)==0:
                break
        else:
            print(p)
               

    
obliczanieLiczbPierwszych(100)                
        
        
##########################################################################################

#Zad5
#Napisz program wyznaczający ciąg Fibonacciego dla 93 elementu (lub 93 iteracji) w najszybszym możliwym czasie.
def Fib(n):
    a=0
    b=1
    for i in range(n):
        print(b)
        b+=a
        a=b-a
        
Fib(93)

############################################################################################################
#zad6
#Napisz program, który wyznacza odległość Levenshteina dla dwóch zadanych łańcuchów znaków.
def levenshtein(a,b):
    n, m = len(a), len(b)
    if n > m:
        a,b = b,a
        n,m = m,n
 
    current = range(n+1)
    for i in range(1,m+1):
        previous, current = current, [i]+[0]*m
        for j in range(1,n+1):
            add, delete = previous[j]+1, current[j-1]+1
            change = previous[j-1]
            if a[j-1] != b[i-1]:
                change = change + 1
            current[j] = min(add, delete, change)
 
    return current[n]
 
print(levenshtein('CtrlC','CtrlV:)'))

